[
    {
        "id": "190eb768.bbe479",
        "type": "subflow",
        "name": "Selection",
        "info": "",
        "category": "ConX",
        "in": [
            {
                "x": 60,
                "y": 80,
                "wires": [
                    {
                        "id": "8dd458d2.8739b8"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 480,
                "y": 80,
                "wires": [
                    {
                        "id": "8dd458d2.8739b8",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [],
        "color": "#5050FF",
        "inputLabels": [
            "selection sequence"
        ],
        "outputLabels": [
            "array of selection names"
        ],
        "icon": "node-red/parser-csv.svg"
    },
    {
        "id": "8dd458d2.8739b8",
        "type": "function",
        "z": "190eb768.bbe479",
        "name": "create entities by name",
        "func": "function toNums(seq) {\n    let parts = seq.split(\"|\"), inc = 1, sign = 1;\n    if (parts.length > 1)\n        inc = parseFloat(parts[1]);\n\n    let nums = parts[0].split(\">\");\n    if (nums.length < 2)\n        return [parseFloat(nums[0])];\n\n    let a = parseFloat(nums[0]),\n        b = parseFloat(nums[1]);\n    if (a > b) {\n        inc = -inc;\n        sign = -1;\n    }\n\n    res = [];\n    for (; a * sign <= b * sign; a += inc)\n        res.push(a);\n\n    return res;\n}\n\nfunction removeItems(res, items) {\n    let i, len = items.length;\n    for (i = 0; i < len; ++i) {\n        index = res.indexOf(items[i]);\n        if (-1 !== index)\n            res.splice(index, 1);\n    }\n}\n\nfunction parseItems(data) {\n    let names = [];\n    let entities = data.split(\",\");\n    let i, len = entities.length;\n    for (i = 0; i < len; ++i) {\n        let entity = entities[i];\n        let parts = entity.split(\";\");\n        if (parts.length < 2) {\n            names.push(parts[0].trim());\n            continue;\n        }\n        if (parts.length > 2)\n            continue;\n\n        let res = [];\n        let name = parts[0].trim();\n        let seqs = parts[1].split(/([+]|[-])/);\n        let tlen = seqs.length, j;\n        for (j = 0; j < tlen; j += 2) {\n            let s = toNums(seqs[j]);\n            if (0 == j || \"+\" == seqs[j - 1])\n                res = res.concat(s);\n            else\n                removeItems(res, s);\n        }\n        tlen = res.length;\n        for (j = 0; j < tlen; ++j)\n            names.push(name + res[j]);\n    }\n    return names;\n}\nmsg.payload = parseItems(msg.payload);\n\nreturn msg;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 270,
        "y": 80,
        "wires": [
            []
        ]
    },
    {
        "id": "75d25c28.ea26a4",
        "type": "subflow",
        "name": "Filter",
        "info": "",
        "category": "ConX",
        "in": [
            {
                "x": 60,
                "y": 40,
                "wires": [
                    {
                        "id": "e73a7a51.b02f88"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 660,
                "y": 100,
                "wires": [
                    {
                        "id": "8667b03f.5342c",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [
            {
                "name": "property",
                "type": "str",
                "value": "entity_id"
            }
        ],
        "color": "#5050FF",
        "inputLabels": [
            "filter and value"
        ],
        "outputLabels": [
            "value"
        ],
        "icon": "font-awesome/fa-filter"
    },
    {
        "id": "e73a7a51.b02f88",
        "type": "switch",
        "z": "75d25c28.ea26a4",
        "name": "",
        "property": "topic",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "selection",
                "vt": "str"
            },
            {
                "t": "neq",
                "v": "selection",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 210,
        "y": 40,
        "wires": [
            [
                "3955eca3.c4a5e4"
            ],
            [
                "8667b03f.5342c"
            ]
        ]
    },
    {
        "id": "3955eca3.c4a5e4",
        "type": "subflow:190eb768.bbe479",
        "z": "75d25c28.ea26a4",
        "name": "",
        "x": 420,
        "y": 40,
        "wires": [
            [
                "745dcf21.23c47"
            ]
        ]
    },
    {
        "id": "8667b03f.5342c",
        "type": "function",
        "z": "75d25c28.ea26a4",
        "name": "",
        "func": "let prop = env.get('property');\nlet arr = flow.get(\"data\");\nif( -1 !== arr.indexOf(msg.payload[prop]))\n    return msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 420,
        "y": 100,
        "wires": [
            []
        ]
    },
    {
        "id": "745dcf21.23c47",
        "type": "change",
        "z": "75d25c28.ea26a4",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "data",
                "pt": "flow",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 630,
        "y": 40,
        "wires": [
            []
        ]
    },
    {
        "id": "c970a695.a199e8",
        "type": "subflow:75d25c28.ea26a4",
        "z": "ae55250c.f60028",
        "name": "",
        "x": 220,
        "y": 660,
        "wires": [
            []
        ]
    }
]